name: Update playlist with Spotify Auth

on:
  push:
    branches:
      - main

jobs:
  spotify-auth-and-apply:
    runs-on: ubuntu-latest
    name: Apply
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.18.0'

      - name: Install spotify_auth_proxy
        run: go install github.com/conradludgate/terraform-provider-spotify/spotify_auth_proxy@latest

      - name: Run spotify_auth_proxy and capture Auth URL
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_CLIENT_REDIRECT_URI: ${{ secrets.SPOTIFY_CLIENT_REDIRECT_URI }}
        run: |
          spotify_auth_proxy > proxy_output.log 2>&1 &
          PROXY_PID=$!
          echo "Waiting for Auth URL and API Key..."
          for i in {1..30}; do
            if grep -q "Auth URL:" proxy_output.log && grep -q "APIKey:" proxy_output.log; then break; fi
            sleep 1
          done
          if ! (grep -q "Auth URL:" proxy_output.log && grep -q "APIKey:" proxy_output.log); then
            echo "‚ùå Failed to get Auth URL or API Key"; cat proxy_output.log; exit 1
          fi
          auth_url=$(grep "Auth URL:" proxy_output.log | awk '{print $3}')
          api_key=$(grep "APIKey:" proxy_output.log | awk '{print $2}')
          echo "AUTH_URL=$auth_url" >> $GITHUB_ENV
          echo "SPOTIFY_API_KEY=$api_key" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Puppeteer and dependencies
        run: |
          npm install puppeteer fs-extra

      - name: Perform Spotify login and authorization
        env:
          SPOTIFY_USERNAME: ${{ secrets.SPOTIFY_USERNAME }}
          SPOTIFY_PASSWORD: ${{ secrets.SPOTIFY_PASSWORD }}
        run: |
          node - <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs-extra');

          const delay = ms => new Promise(res => setTimeout(res, ms));
          const randomDelay = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);

          async function typeWithHumanDelay(page, selector, text) {
            for (const char of text) {
              await page.type(selector, char, { delay: randomDelay(30, 120) });
              if (Math.random() > 0.7) await delay(randomDelay(50, 200));
            }
          }

          async function clickByText(page, text, elementType = 'button') {
            const elements = await page.$$(elementType);
            for (const element of elements) {
              const content = await page.evaluate(el => el.textContent?.trim(), element);
              if (content?.toLowerCase().includes(text.toLowerCase())) {
                await element.click();
                return true;
              }
            }
            return false;
          }

          async function safeClick(page, selector, timeout = 10000) {
            try {
              await page.waitForSelector(selector, { visible: true, timeout });
              await delay(500);
              const element = await page.$(selector);
              if (element) {
                await element.click();
                return true;
              }
            } catch (e) {}
            return false;
          }

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox'],
              defaultViewport: { width: 1280, height: 800 }
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0');

            try {
              console.log("üåê Navigating to Spotify Auth URL...");
              await page.goto(process.env.AUTH_URL, { waitUntil: 'networkidle2', timeout: 60000 });
              await delay(3000);

              try {
                const cookieAccepted = await clickByText(page, 'accept') ||
                                       await safeClick(page, '#onetrust-accept-btn-handler');
                if (cookieAccepted) console.log("üç™ Accepted cookies");
              } catch { console.log("‚ÑπÔ∏è No cookie banner found"); }

              console.log("üìß Entering email...");
              await page.waitForSelector('input[type="email"], #login-username', { visible: true, timeout: 15000 });
              await typeWithHumanDelay(page, 'input[type="email"], #login-username', process.env.SPOTIFY_USERNAME);
              await delay(1000);

              console.log("‚û°Ô∏è Clicking Continue...");
              const continueClicked = await clickByText(page, 'continue') ||
                                     await safeClick(page, 'button[data-testid="login-button"]');
              if (!continueClicked) throw new Error("Continue button not found");
              await delay(4000);

              console.log("üîç Checking for OTP/password choice...");
              const otpScreenExists = await page.evaluate(() => {
                return Array.from(document.querySelectorAll('*')).some(el =>
                  el.textContent?.toLowerCase().includes('6-digit code'));
              });

              if (otpScreenExists) {
                console.log("üî¢ Found OTP screen, switching to password login...");
                const passwordOptionClicked = await clickByText(page, 'Log in with a password') ||
                                               await safeClick(page, 'button[data-encore-id="buttonTertiary"]');
                if (!passwordOptionClicked) throw new Error("Password login option not found");
                await page.waitForSelector('input[type="password"], #login-password', { visible: true, timeout: 15000 });
                await delay(3000);
              }

              console.log("üîë Entering password...");
              await typeWithHumanDelay(page, 'input[type="password"], #login-password', process.env.SPOTIFY_PASSWORD);
              await delay(2000);

              console.log("üöÄ Submitting login...");
              let loginClicked = false;
              try {
                loginClicked = await safeClick(page, '#login-button') ||
               await safeClick(page, 'button[data-testid="login-button"]') ||
               await safeClick(page, 'button[data-encore-id="buttonPrimary"]') ||
               await safeClick(page, 'button[type="submit"]') ||
               await clickByText(page, 'Log In') ||
               await clickByText(page, 'log in');

              console.log("üåê Current page URL:", page.url());
              const buttons = await page.$$eval('button', btns => btns.map(b => b.textContent?.trim()));
              console.log("üîç Buttons detected:", buttons);

                if (!loginClicked) {
                  const allBtns = await page.$$eval('button', btns => btns.map(b => b.textContent?.trim()));
                  console.log("üîç Available buttons:", allBtns);
                }
              } catch { console.log("‚ö†Ô∏è Fallback: Login button not found in known selectors"); }

              if (!loginClicked) throw new Error("Login button not found");
              await delay(5000);

              try {
                const stayLoggedIn = await clickByText(page, 'stay logged in') ||
                                     await safeClick(page, '[data-testid="auth-accept"]');
                if (stayLoggedIn) console.log("üîò Clicked 'Stay Logged In'");
              } catch {}

              console.log("üîÑ Checking for authorization screen...");
              try {
                const authAccepted = await clickByText(page, 'agree') ||
                                     await safeClick(page, '#auth-accept');
                if (authAccepted) {
                  console.log("‚úÖ Clicked 'Agree'");
                  await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 15000 });
                }
              } catch {}

              const currentURL = page.url();
              if (currentURL.includes('callback?code=')) {
                console.log('üéâ Spotify authorization successful!');
              } else {
                throw new Error(`Authorization failed. Current URL: ${currentURL}`);
              }

            } catch (error) {
              console.error('üí• Error during Spotify login:', error.message);
              await page.screenshot({ path: 'spotify_error.png', fullPage: true });
              await fs.writeFile('error_debug.html', await page.content());
              throw error;
            } finally {
              await browser.close();
            }
          })();
          EOF

      - name: Run Terraform Apply
        run: |
          terraform init
          terraform apply -var="SPOTIFY_API_KEY=${{ env.SPOTIFY_API_KEY }}" -auto-approve

      - name: Upload debug files (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: spotify-debug
          path: |
            spotify_error.png
            error_debug.html
