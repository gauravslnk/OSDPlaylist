name: Update playlist with Spotify Auth

on:
  push:
    branches:
      - main

jobs:
  spotify-auth-and-apply:
    runs-on: ubuntu-latest
    name: Apply
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.18.0'

      - name: Install spotify_auth_proxy
        run: go install github.com/conradludgate/terraform-provider-spotify/spotify_auth_proxy@latest

      - name: Run spotify_auth_proxy and capture Auth URL
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_CLIENT_REDIRECT_URI: ${{ secrets.SPOTIFY_CLIENT_REDIRECT_URI }}
        run: |
          spotify_auth_proxy > proxy_output.log 2>&1 &
          PROXY_PID=$!
          echo "Waiting for Auth URL and API Key..."
          for i in {1..30}; do
            if grep -q "Auth URL:" proxy_output.log && grep -q "APIKey:" proxy_output.log; then break; fi
            sleep 1
          done
          if ! (grep -q "Auth URL:" proxy_output.log && grep -q "APIKey:" proxy_output.log); then
            echo "‚ùå Failed to get Auth URL or API Key"; cat proxy_output.log; exit 1
          fi
          auth_url=$(grep "Auth URL:" proxy_output.log | awk '{print $3}')
          api_key=$(grep "APIKey:" proxy_output.log | awk '{print $2}')
          echo "AUTH_URL=$auth_url" >> $GITHUB_ENV
          echo "SPOTIFY_API_KEY=$api_key" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Puppeteer and fs-extra
        run: npm install puppeteer fs-extra

      - name: Perform Spotify login and authorization
        env:
          SPOTIFY_USERNAME: ${{ secrets.SPOTIFY_USERNAME }}
          SPOTIFY_PASSWORD: ${{ secrets.SPOTIFY_PASSWORD }}
        run: |
          node - <<'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs-extra');

          const delay = ms => new Promise(res => setTimeout(res, ms));
          const randomDelay = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);

          async function typeWithHumanDelay(page, selector, text) {
            for (const char of text) {
              await page.type(selector, char, { delay: randomDelay(30, 100) });
              if (Math.random() > 0.8) await delay(randomDelay(50, 150));
            }
          }

          async function clickByText(page, text, elementType = 'button') {
            const elements = await page.$$(elementType);
            for (const element of elements) {
              const elementText = await page.evaluate(el => el.textContent?.trim(), element);
              if (elementText?.toLowerCase() === text.toLowerCase()) {
                await element.click();
                return true;
              }
            }
            return false;
          }

          async function safeClick(page, selector, timeout = 10000) {
            try {
              await page.waitForSelector(selector, { visible: true, timeout });
              await delay(500);
              const element = await page.$(selector);
              if (element) {
                await element.click();
                return true;
              }
            } catch {}
            return false;
          }

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox'],
              defaultViewport: { width: 1280, height: 800 }
            });

            const page = await browser.newPage();
            await page.setUserAgent('Mozilla/5.0');

            try {
              console.log("üåê Navigating to Spotify Auth URL...");
              await page.goto(process.env.AUTH_URL, { waitUntil: 'networkidle2', timeout: 60000 });
              await delay(3000);

              // Check if redirected to Google login by mistake
              const url = page.url();
              if (url.includes('accounts.google.com')) {
                throw new Error("‚ùå Redirected to Google login instead of Spotify login page.");
              }

              console.log("üìß Entering email...");
              await page.waitForSelector('input[type="email"], #login-username', { visible: true, timeout: 15000 });
              await typeWithHumanDelay(page, 'input[type="email"], #login-username', process.env.SPOTIFY_USERNAME);
              await delay(1000);

              console.log("‚û°Ô∏è Clicking Continue...");
              const continueClicked = await clickByText(page, 'Continue') ||
                                     await safeClick(page, 'button[data-testid="login-button"]') ||
                                     await safeClick(page, 'button[type="submit"]');
              if (!continueClicked) throw new Error("‚ùå Continue button not found.");
              await delay(4000);

              console.log("üîç Checking for OTP screen...");
              const otpDetected = await page.evaluate(() =>
                Array.from(document.querySelectorAll('*')).some(el =>
                  el.textContent?.toLowerCase().includes('6-digit code')
                )
              );

              if (otpDetected) {
                console.log("üîÅ Clicking 'Log in with a password'...");
                const clicked = await clickByText(page, 'Log in with a password') ||
                                await safeClick(page, 'button[data-encore-id="buttonTertiary"]');
                if (!clicked) throw new Error("‚ùå Could not find 'Log in with a password' option.");
                await delay(3000);
              }

              console.log("üîë Entering password...");
              await page.waitForSelector('input[type="password"]', { visible: true, timeout: 10000 });
              await typeWithHumanDelay(page, 'input[type="password"]', process.env.SPOTIFY_PASSWORD);
              await delay(1500);

              console.log("üöÄ Submitting login...");
              const loginClicked = await safeClick(page, '#login-button') ||
                                   await safeClick(page, 'button[data-testid="login-button"]') ||
                                   await safeClick(page, 'button[data-encore-id="buttonPrimary"]') ||
                                   await clickByText(page, 'Log In');
              if (!loginClicked) throw new Error("‚ùå Login button not found.");
              await delay(5000);

              console.log("üîÑ Checking for authorization screen...");
              const authClicked = await safeClick(page, '#auth-accept') || await clickByText(page, 'Agree');
              if (authClicked) {
                console.log("‚úÖ Authorization accepted.");
                await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 15000 });
              }

              const finalURL = page.url();
              if (!finalURL.includes('callback?code=')) {
                throw new Error(`‚ùå Authorization failed. Final URL: ${finalURL}`);
              }

              console.log("üéâ Spotify authorization successful!");

            } catch (error) {
              console.error('üí• Error during Spotify login:', error.message);
              await page.screenshot({ path: 'spotify_error.png', fullPage: true });
              await fs.writeFile('error_debug.html', await page.content());
              throw error;
            } finally {
              await browser.close();
            }
          })();
          EOF

      - name: Run Terraform Apply
        run: |
          terraform init
          terraform apply -var="SPOTIFY_API_KEY=${{ env.SPOTIFY_API_KEY }}" -auto-approve

      - name: Upload debug files (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: spotify-debug
          path: |
            spotify_error.png
            error_debug.html
